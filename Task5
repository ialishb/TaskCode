import java.util.*;

class Course {
    private String courseCode;
    private String title;
    private String description;
    private int capacity;
    private int enrolled;
    private String schedule;

    public Course(String courseCode, String title, String description, int capacity, String schedule) {
        this.courseCode = courseCode;
        this.title = title;
        this.description = description;
        this.capacity = capacity;
        this.schedule = schedule;
        this.enrolled = 0;
    }

    public String getCourseCode() {
        return courseCode;
    }

    public String getTitle() {
        return title;
    }

    public String getDescription() {
        return description;
    }

    public int getCapacity() {
        return capacity;
    }

    public int getEnrolled() {
        return enrolled;
    }

    public String getSchedule() {
        return schedule;
    }

    public boolean addStudent() {
        if (enrolled < capacity) {
            enrolled++;
            return true;
        }
        return false;
    }

    public boolean removeStudent() {
        if (enrolled > 0) {
            enrolled--;
            return true;
        }
        return false;
    }

    public boolean isFull() {
        return enrolled >= capacity;
    }

    @Override
    public String toString() {
        return String.format("%s - %s\nDescription: %s\nSchedule: %s\nCapacity: %d, Enrolled: %d",
                courseCode, title, description, schedule, capacity, enrolled);
    }
}

class Student {
    private String studentId;
    private String name;
    private List<Course> registeredCourses;

    public Student(String studentId, String name) {
        this.studentId = studentId;
        this.name = name;
        this.registeredCourses = new ArrayList<>();
    }

    public String getStudentId() {
        return studentId;
    }

    public String getName() {
        return name;
    }

    public List<Course> getRegisteredCourses() {
        return registeredCourses;
    }

    public void registerCourse(Course course) {
        if (!course.isFull()) {
            registeredCourses.add(course);
            course.addStudent();
            System.out.println("Successfully registered for " + course.getTitle());
        } else {
            System.out.println("Course is full. Cannot register " + course.getTitle());
        }
    }

    public void dropCourse(Course course) {
        if (registeredCourses.contains(course)) {
            registeredCourses.remove(course);
            course.removeStudent();
            System.out.println("Dropped course: " + course.getTitle());
        }
    }
}

class CourseManager {
    private List<Course> courses;

    public CourseManager() {
        this.courses = new ArrayList<>();
    }

    public void addCourse(Course course) {
        courses.add(course);
    }

    public Course findCourse(String courseCode) {
        for (Course course : courses) {
            if (course.getCourseCode().equalsIgnoreCase(courseCode)) {
                return course;
            }
        }
        return null;
    }

    public void listCourses() {
        if (courses.isEmpty()) {
            System.out.println("No courses available.");
        } else {
            System.out.println("Available Courses:");
            for (Course course : courses) {
                System.out.println(course);
                System.out.println();
            }
        }
    }
}

class StudentManager {
    private List<Student> students;

    public StudentManager() {
        this.students = new ArrayList<>();
    }

    public void addStudent(Student student) {
        students.add(student);
    }

    public Student findStudent(String studentId) {
        for (Student student : students) {
            if (student.getStudentId().equalsIgnoreCase(studentId)) {
                return student;
            }
        }
        return null;
    }
}

 class CourseRegistrationSystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        CourseManager courseManager = new CourseManager();
        StudentManager studentManager = new StudentManager();


        courseManager.addCourse(new Course("CS101", "Introduction to Computer Science", "Learn the basics of computer programming.", 30, "Mon/Wed 9-11 AM"));
        courseManager.addCourse(new Course("MAT202", "Advanced Mathematics", "Explore complex mathematical theories.", 25, "Tue/Thu 10-12 AM"));


        studentManager.addStudent(new Student("10001", "Alishba"));
        studentManager.addStudent(new Student("10002", "Gondal"));

        boolean quit = false;
        while (!quit) {
            System.out.println("Enter an option: \n1. List Courses \n2. Register for a Course \n3. Drop a Course \n4. Exit");
            int choice = scanner.nextInt();
            scanner.nextLine();  
            switch (choice) {
                case 1:
                    courseManager.listCourses();
                    break;
                case 2:
                    System.out.println("Enter Student ID:");
                    String studentId = scanner.nextLine();
                    System.out.println("Enter Course Code:");
                    String courseCode = scanner.nextLine();

                    Student student = studentManager.findStudent(studentId);
                    Course course = courseManager.findCourse(courseCode);
                    if (student != null && course != null) {
                        student.registerCourse(course);
                    } else {
                        System.out.println("Student or course not found.");
                    }
                    break;
                case 3:
                    System.out.println("Enter Student ID:");
                    studentId = scanner.nextLine();
                    System.out.println("Enter Course Code:");
                    courseCode = scanner.nextLine();

                    student = studentManager.findStudent(studentId);
                    course = courseManager.findCourse(courseCode);
                    if (student != null && course != null) {
                        student.dropCourse(course);
                    } else {
                        System.out.println("Student or course not found.");
                    }
                    break;
                case 4:
                    quit = true;
                    break;
                default:
                    System.out.println("Invalid option. Please enter a number between 1 and 4.");
            }
        }

        scanner.close();
        System.out.println("System exited. Thank you!");
    }
}
